{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNtMq2DK+yylrD9aBRdv5tj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"EqsYfSgHTq81","executionInfo":{"status":"error","timestamp":1757133342894,"user_tz":-330,"elapsed":40,"user":{"displayName":"Sakshi Pawar","userId":"07492321343765348747"}},"outputId":"804e684b-c201-4c3f-a469-ec981db77822","colab":{"base_uri":"https://localhost:8080/","height":124}},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (ipython-input-4172405908.py, line 7)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-4172405908.py\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    ===============================\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from scipy import stats\n","\n","===============================\n","Step 1: Create Sample Dataset\n","===============================\n","Example dataset (you can replace with your own)\n","data = {\n","'CustomerID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n","'Region': ['North', 'South', 'East', 'West', 'North', 'South', 'East', 'West', 'North', 'South'],\n","'Sales': [200, 150, 300, 400, 250, 180, 320, 410, 210, 160],\n","'Profit': [20, 15, 35, 50, 25, 18, 33, 55, 22, 16],\n","'Quantity': [2, 1, 3, 4, 2, 1, 3, 5, 2, 1]\n","}\n","\n","Create DataFrame\n","df = pd.DataFrame(data)\n","\n","===============================\n","Step 2: Basic Exploration\n","===============================\n","print(\"\\n--- Dataset Info ---\")\n","print(df.info())\n","\n","print(\"\\n--- First 5 Rows ---\")\n","print(df.head())\n","\n","print(\"\\n--- Shape (rows, cols) ---\")\n","print(df.shape)\n","\n","print(\"\\n--- Summary Statistics ---\")\n","print(df.describe(include='all'))\n","\n","===============================\n","Step 3: Data Structure\n","===============================\n","print(\"\\n--- Column Data Types ---\")\n","print(df.dtypes)\n","\n","print(\"\\n--- Missing Values ---\")\n","print(df.isnull().sum())\n","\n","print(\"\\n--- Unique Values in Categorical Columns ---\")\n","for col in df.select_dtypes(include='object').columns:\n","print(f\"{col}: {df[col].nunique()} unique values\")\n","\n","===============================\n","Step 4: Trends, Patterns & Anomalies\n","===============================\n","Distribution plots\n","num_cols = df.select_dtypes(include=np.number).columns\n","for col in num_cols:\n","plt.figure(figsize=(6,4))\n","sns.histplot(df[col].dropna(), kde=True)\n","plt.title(f\"Distribution of {col}\")\n","plt.show()\n","\n","Correlation heatmap\n","plt.figure(figsize=(10,6))\n","sns.heatmap(df[num_cols].corr(), annot=True, cmap=\"coolwarm\", fmt=\".2f\")\n","plt.title(\"Correlation Heatmap\")\n","plt.show()\n","\n","Boxplots for outlier detection\n","for col in num_cols:\n","plt.figure(figsize=(6,4))\n","sns.boxplot(x=df[col])\n","plt.title(f\"Outlier Detection in {col}\")\n","plt.show()\n","\n","===============================\n","Step 5: Hypothesis Testing Examples\n","===============================\n","Example 1: Compare Sales across Regions\n","if 'Region' in df.columns and 'Sales' in df.columns:\n","groups = df.groupby('Region')['Sales'].apply(list)\n","if len(groups) > 2:\n","stat, p = stats.f_oneway(*groups)\n","print(\"\\nANOVA Results (Sales by Region):\", stat, p)\n","\n","Example 2: Correlation significance test between Sales and Profit\n","if 'Sales' in df.columns and 'Profit' in df.columns:\n","stat, p = stats.pearsonr(df['Sales'], df['Profit'])\n","print(f\"\\nCorrelation test between Sales and Profit: r={stat}, p={p}\")\n","\n","===============================\n","Step 6: Data Issues Detection\n","===============================\n","print(\"\\n--- Duplicate Rows ---\")\n","print(df.duplicated().sum())\n","\n","print(\"\\n--- Potential Outliers (Z-score > 3) ---\")\n","outliers = {}\n","for col in num_cols:\n","z_scores = np.abs(stats.zscore(df[col].dropna()))\n","outliers[col] = (z_scores > 3).sum()\n","print(outliers)"]}]}